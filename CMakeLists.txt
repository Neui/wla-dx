cmake_minimum_required(VERSION 2.8.9 FATAL_ERROR)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/binaries/")

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release"
        CACHE STRING "Type of build")
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Release" "Debug"
        "MinSizeRel" "RelWithDebInfo")
endif()

project (WLA-DX C)

set(CPUS gb wdc65c02 mcs6502 mcs6510 w65816 huc6280 spc700 z80)

option(GDB_DEBUGGING
    "Enable debugging via gdb (Only when CMAKE_BUILD_TYPE is Debug)" ON)

# CMake will automatically define WIN32 for us for Microsoft compilers, how
# convenient! But we need MSDOS flag as well. Additionally, other compilers
# don't define it by default. WIN32 Does NOT include Cygwin.
if (WIN32)
    add_definitions(-DWIN32)
    add_definitions(-DMSDOS)
endif (WIN32)

# This should work on ANY POSIX-compliant environment.
if (UNIX)
    add_definitions(-DUNIX)
    link_libraries(m) # Deprecated, but best solution. See: 
    # http://www.cmake.org/pipermail/cmake/2009-April/028439.html
endif (UNIX)

if ((CMAKE_C_COMPILER_ID MATCHES "Clang") OR (CMAKE_C_COMPILER_ID MATCHES "GNU"))
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ansi -pedantic-errors -Wall -Wextra")
    string(REPLACE "-O2" "-O3" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
endif ()

# Tell MSVC to STFU about _CRT_SECURE_NO_WARNINGS
if (MSVC)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /Za") # Disable extensions
    # Per http://www.cmake.org/pipermail/cmake/2011-October/046738.html,
    # replace flags directly instead of appending them.
    string(REPLACE "/O[0-4]" "/Ox" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
    add_definitions(/D_CRT_SECURE_NO_WARNINGS)
endif (MSVC)

# --- WATCOM C Compiler works just fine as well. Might be a decent alternative
# 386 MSDOS compiler as well (compare to DJGPP).
if (WATCOM)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -za") # Disable extensions
    string(REPLACE "-ot" "-ox" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
    string(REGEX REPLACE "-w=[0-4]" "-w=4" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
endif (WATCOM)

# Make the source tree available to includes
include_directories("${PROJECT_SOURCE_DIR}")
# Generated tables are created at the top build-tree directory
include_directories("${CMAKE_BINARY_DIR}")

add_subdirectory(wlab)
add_subdirectory(wlalink)
add_subdirectory(doc)

# --- WLA executables ---
set(WLA_SRCS
    main.c
    hashmap.c
    parse.c
    include_file.c
    pass_1.c
    pass_2.c
    pass_3.c
    pass_4.c
    stack.c
    listfile.c
    )

foreach(CPU IN LISTS CPUS)
    # CPU_TARGET has the prefix WDC and MCS removed because they usually
    # named like that and for backwards compatibility
    string(REGEX REPLACE "^(wdc|w|mcs)(65)" "\\2" CPU_TARGET "${CPU}")
    string(TOUPPER "${CPU}" CPU_UPPER) # For COMPILE_DEFINITION

    # Generate opcode table
    add_executable(gen-${CPU_TARGET}
        "opcode_table_generator.c"
        "opcodes_${CPU_TARGET}.c"
        )
    set_property(TARGET gen-${CPU_TARGET} APPEND PROPERTY
        COMPILE_DEFINITIONS "${CPU_UPPER}")
    set_property(TARGET gen-${CPU_TARGET} PROPERTY
        RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/op_tbl_gen/")
    set(TABLE_GEN_OUTPUT "${CMAKE_BINARY_DIR}/op_tbl_gen/opcodes_${CPU_TARGET}_tables.c")
    add_custom_command(
        OUTPUT "${TABLE_GEN_OUTPUT}"
        COMMAND gen-${CPU_TARGET} "${TABLE_GEN_OUTPUT}"
        DEPENDS gen-${CPU_TARGET}
        )

    # Generate actual wla binary
    add_executable(wla-${CPU_TARGET}
        ${WLA_SRCS} "${TABLE_GEN_OUTPUT}"
        "opcodes_${CPU_TARGET}.c"
        )
    set_property(TARGET wla-${CPU_TARGET} APPEND PROPERTY
        COMPILE_DEFINITIONS "${CPU_UPPER}")
    install(TARGETS wla-${CPU_TARGET} DESTINATION bin)
endforeach(CPU)

# Testings
enable_testing()
add_custom_target(check
    COMMAND "${CMAKE_CTEST_COMMAND}" --verbose
    WORKING_DIRECTORY "${CMAKE_BINARY_DIR}")
add_subdirectory(tests)

